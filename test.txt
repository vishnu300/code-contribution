0days ago
1days ago
2days ago
3days ago
4days ago
5days ago
6days ago
7days ago
8days ago
9days ago
10days ago
11days ago
12days ago
13days ago
14days ago
15days ago
16days ago
17days ago
18days ago
19days ago
20days ago
21days ago
22days ago
23days ago
24days ago
25days ago
26days ago
27days ago
28days ago
29days ago
30days ago
31days ago
32days ago
33days ago
34days ago
35days ago
36days ago
37days ago
38days ago
39days ago
40days ago
41days ago
42days ago
43days ago
44days ago
45days ago
46days ago
47days ago
48days ago
49days ago
50days ago
51days ago
52days ago
53days ago
54days ago
55days ago
56days ago
57days ago
58days ago
59days ago
60days ago
61days ago
62days ago
63days ago
64days ago
65days ago
66days ago
67days ago
68days ago
69days ago
70days ago
71days ago
72days ago
73days ago
74days ago
75days ago
76days ago
77days ago
78days ago
79days ago
80days ago
81days ago
82days ago
83days ago
84days ago
85days ago
86days ago
87days ago
88days ago
89days ago
90days ago
91days ago
92days ago
93days ago
94days ago
95days ago
96days ago
97days ago
98days ago
99days ago
100days ago
101days ago
102days ago
103days ago
104days ago
105days ago
106days ago
107days ago
108days ago
109days ago
110days ago
111days ago
112days ago
113days ago
114days ago
115days ago
116days ago
117days ago
118days ago
119days ago
model 

from django.db import models

class UploadedPDF(models.Model):
    pdf_file = models.FileField(upload_to='pdfs/')
    compressed_file = models.FileField(upload_to='compressed_pdfs/', null=True, blank=True)
    upload_date = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return self.pdf_file.name


views.py

from django.shortcuts import render, redirect
from django.http import HttpResponse
from .models import UploadedPDF
import PyPDF2
import io

def upload_pdf(request):
    if request.method == 'POST':
        pdf_file = request.FILES['pdf_file']
        uploaded_pdf = UploadedPDF.objects.create(pdf_file=pdf_file)

        # Compress the PDF using PyPDF2
        with open(pdf_file.path, 'rb') as pdf_input, io.BytesIO() as pdf_output:
            pdf_reader = PyPDF2.PdfReader(pdf_input)
            pdf_writer = PyPDF2.PdfWriter()
            for page in pdf_reader.pages:
                pdf_writer.add_page(page)
            pdf_writer.write(pdf_output)

        # Save the compressed PDF
        uploaded_pdf.compressed_file.save(f"{pdf_file.name}_compressed.pdf", pdf_output)
        pdf_output.seek(0)

        return redirect('pdf_list')
    else:
        return render(request, 'compressor/upload_pdf.html')

def pdf_list(request):
    pdfs = UploadedPDF.objects.all()
    return render(request, 'compressor/pdf_list.html', {'pdfs': pdfs})

def download_compressed_pdf(request, pdf_id):
    pdf = UploadedPDF.objects.get(id=pdf_id)
    response = HttpResponse(pdf.compressed_file, content_type='application/pdf')
    response['Content-Disposition'] = f'attachment; filename="{pdf.compressed_file.name}"'
    return response


templates 

<form method="POST" enctype="multipart/form-data">
    {% csrf_token %}
    <input type="file" name="pdf_file">
    <button type="submit">Upload PDF</button>
</form>

{% for pdf in pdfs %}
    <li>
        <a href="{% url 'download_compressed_pdf' pdf.id %}">{{ pdf.pdf_file.name }}</a>
    </li>
{% endfor %}


urls.py

from django.urls import path
from compressor import views

urlpatterns = [
    path('upload/', views.upload_pdf, name='upload_pdf'),
    path('list/', views.pdf_list, name='pdf_list'),
    path('download/<int:pdf_id>/', views.download_compressed_pdf, name='download_compressed_pdf'),
]








import streamlit as st
import aspose.pdf as ap
import os

# Streamlit app title
st.title("PDF Compressor")

# File uploader widget
uploaded_file = st.file_uploader("Upload a PDF file to compress", type=["pdf"])

# Button to trigger compression
if uploaded_file is not None:
    # Save the uploaded file temporarily
    input_path = os.path.join("temp", uploaded_file.name)
    output_path = os.path.join("temp", "compressed_" + uploaded_file.name)

    # Ensure the temp directory exists
    os.makedirs("temp", exist_ok=True)

    with open(input_path, "wb") as f:
        f.write(uploaded_file.getbuffer())
    
    # Display the file size before compression
    original_size = os.path.getsize(input_path)
    st.write(f"Original file size: {original_size / 1024:.2f} KB")

    # Compress the PDF using Aspose.PDF
    comppdf = ap.Document(input_path)
    pdfopti = ap.optimization.OptimizationOptions()
    pdfopti.image_compression_options.compress_images = True
    pdfopti.image_compression_options.image_quality = 10
    comppdf.optimize_resources(pdfopti)
    comppdf.save(output_path)

    # Display the file size after compression
    compressed_size = os.path.getsize(output_path)
    st.write(f"Compressed file size: {compressed_size / 1024:.2f} KB")

    # Provide download link for the compressed file
    with open(output_path, "rb") as f:
        st.download_button(
            label="Download Compressed PDF",
            data=f,
            file_name="compressed_" + uploaded_file.name,
            mime="application/pdf"
        )




